generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id    String @id @default(uuid())
  email String @unique

  firstName String
  lastName  String

  title    String
  githubId  String @unique

  skills   Skill[]
  description String

  jobs      Job[]

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id    String @id @default(uuid())

  name  String @unique
  moto  String?

  services Json
  skills Skill[]
  overview String

  website String

  jobs Job[]
  cases Case[]
  accounts Account[]
  searchSuits SearchSuit[]
  promptTemplates PromptTemplate[] @relation(name: "templates")

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Case {
  id    String @id @default(uuid())

  name  String @unique
  duration String
  market String
  industry String
  description String

  data Json

  companyId String
  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id    String @id
  name  String @unique

  accounts Account[]
  companies Company[]
}

model Job {
  id        String @id @default(uuid())

  title     String
  link      String @unique
  postedAt  DateTime

  approved  Boolean @default(false)
  applied   Boolean @default(false)

  data      Json

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PromptType {
  COVER_LETTER
  ACCOUNT_SELECTION
  CASE_SELECTION
}

model PromptTemplate {
  id    String @id @default(uuid())

  name  String @unique
  temperature Decimal @default(0.7)
  value String

  type  PromptType @default(COVER_LETTER)

  active Boolean? @default(true)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], name: "templates")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SearchSuit {
  id    String @id @default(uuid())

  name  String @unique
  active Boolean @default(true)

  value Json

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
