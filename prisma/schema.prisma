generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id    String @id @default(uuid())
  email String @unique

  isActive Boolean @default(false)

  firstName String
  lastName  String

  title    String
  githubId String @unique

  skills      Skill[]
  description String

  jobs Job[]

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id String @id @default(uuid())

  name String  @unique
  moto String?

  services Json
  skills   Skill[]
  overview String

  website String

  jobs            Job[]
  cases           Case[]
  accounts        Account[]
  searchSuits     SearchSuit[]
  promptTemplates PromptTemplate[] @relation(name: "templates")

  qa       QA?
  examples Examples?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Case {
  id String @id @default(uuid())

  name        String
  duration    String
  market      String
  industry    String
  description String

  data Json

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id   String @id
  name String @unique

  accounts  Account[]
  companies Company[]
}

model Job {
  id String @id @default(uuid())

  title    String
  link     String   @unique
  postedAt DateTime

  approved          Boolean @default(false)
  applied           Boolean @default(false)
  success           Boolean @default(false)
  approvePercentage Float   @default(0)

  data Json

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PromptType {
  COVER_LETTER
  ACCOUNT_SELECTION
  CASE_SELECTION
  APPROVE_JOB
  ANSWER_QUESTION
}

enum OpenAIModel {
  GPT35_TURBO
  GPT4_TURBO
  GPT4O
  GPT4O_MINI
  O1
  O1_MINI
}

model PromptTemplate {
  id String @id @default(uuid())

  name  String @unique
  value String

  model       OpenAIModel @default(GPT4_TURBO)
  temperature Float       @default(0.7)

  type PromptType @default(COVER_LETTER)

  active Boolean? @default(true)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], name: "templates", onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SearchSuit {
  id String @id @default(uuid())

  name   String  @unique
  active Boolean @default(true)

  link String? @default("")

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model QA {
  id String @id @default(uuid())

  data Json

  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Examples {
  id String @id @default(uuid())

  data Json

  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
