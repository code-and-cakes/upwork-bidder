import { Injectable } from '@nestjs/common';

import { PuppeteerService } from '../puppeteer/puppeteer.service';
import { wait } from '../shared/lib/wait';
import { LOCAL_STORAGE_VALUES } from './consts/localStorage.consts';
import { SELECTORS } from './consts/selectors.consts';
import { UPWORK_URL } from './consts/upwork-urls.consts';
import { testSearchSuit1 } from './data/test-search-suit-1';
import { getJobSearchLink } from './lib/getJobSearchLink';
import { getJobSearchParams } from './lib/getJobSearchParams';
import { parseJobs } from './lib/parseJobs';
import { JobSearchParams } from './types/job.types';

@Injectable()
export class AutomationService {
  constructor(private readonly ui: PuppeteerService) {
    this.ui.authFn = this.login.bind(this);
    this.ui.init().then(() => this.start());
  }

  async findJobs(dynamicParams: JobSearchParams) {
    const params = getJobSearchParams(dynamicParams);
    const url = getJobSearchLink(params);

    console.log('Navigating to:', url);
    await this.ui.navigateTo(url);
    const html = await this.ui.getHTML();
    const jobs = parseJobs(html);
  }

  async openJobInNewTab(link: string) {
    await this.ui.click(link);
  }

  async applyForJob() {
    // todo: scroll the page by 600px until bottom
    await wait(2000);
    await this.ui.scroll(600);
    await wait(2000);
    await this.ui.scroll(600);
    await wait(2000);
    await this.ui.scroll(-1200);
    await wait(200);

    await this.ui.click(SELECTORS.job.btn.apply);

    // * close modal
    try {
      await this.ui.click(SELECTORS.common.btn.modalClose).catch();
    } catch (e) {
      console.log(e);
    }

    await wait(2000);

    await this.ui.scrollIntoView(SELECTORS.bidding.input.coverLetter);
    await this.ui.type(
      SELECTORS.bidding.input.coverLetter,
      'This is our Cover Letter Generated By AI',
    );
  }

  async start() {
    await this.ui.navigateTo(UPWORK_URL.bestMatches);
    await this.findJobs(testSearchSuit1);
  }

  private async login() {
    console.log('Logging in...');

    await this.ui.setToLocalStorage(LOCAL_STORAGE_VALUES);

    await wait(500);

    await this.ui.type(SELECTORS.login.input.email, process.env.UPWORK_EMAIL);
    await this.ui.click(SELECTORS.login.btn.goToPwd);

    await this.ui.type(SELECTORS.login.input.pwd, process.env.UPWORK_PASSWORD);
    await this.ui.click(SELECTORS.login.btn.login);

    try {
      await this.ui.type(
        SELECTORS.login.input.secret,
        process.env.UPWORK_SECRET,
      );
      await this.ui.click(SELECTORS.login.btn.login);
    } catch {}

    await this.ui.saveCookies();
  }
}
