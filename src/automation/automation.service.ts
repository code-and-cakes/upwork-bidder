import { Injectable } from '@nestjs/common';

import { JobsService } from '../jobs/jobs.service';
import { Job } from '../jobs/types/job.types';
import { PuppeteerService } from '../puppeteer/puppeteer.service';
import { wait } from '../shared/lib/wait';
import { LOCAL_STORAGE_VALUES } from './consts/localStorage.consts';
import { SELECTORS } from './consts/selectors.consts';
import { UPWORK_URL } from './consts/upwork-urls.consts';
import { testSearchSuit1 } from './data/test-search-suit-1';
import { getJobSearchLink } from './lib/getJobSearchLink';
import { getJobSearchParams } from './lib/getJobSearchParams';
import { parseJobInfo } from './lib/parseJobInfo';
import { parseJobs } from './lib/parseJobs';
import { JobSearchParams } from './types/job.types';

@Injectable()
export class AutomationService {
  private isLoginActive = false;

  constructor(
    private readonly ui: PuppeteerService,
    private readonly jobsService: JobsService,
  ) {
    this.ui.authFn = this.login.bind(this);
    this.ui.init().then(() => this.start());
  }

  async findJobs(dynamicParams: JobSearchParams) {
    const params = getJobSearchParams(dynamicParams);
    const url = getJobSearchLink(params);

    console.log('Navigating to:', url);
    await this.ui.navigateTo(url);
    const html = await this.ui.getHTML();
    const parsedJobs = parseJobs(html);
    const dbJobs = await this.jobsService.createMany(parsedJobs);
    console.log(dbJobs);
  }

  async applyForJob(job: Job) {
    await this.ui.navigateTo(job.link);
    await this.ui.scrollDownAndUp();

    const html = await this.ui.getHTML();
    const parsedJobInfo = parseJobInfo(html);

    await this.ui.click(SELECTORS.job.btn.apply);

    await this.ui.waitForElement(SELECTORS.bidding.input.coverLetter, 10000);

    await this.ui.scrollIntoView(SELECTORS.bidding.input.coverLetter);
    await this.ui.type(
      SELECTORS.bidding.input.coverLetter,
      'This is our Cover Letter Generated By AI',
    );
  }

  async start() {
    await this.ui.navigateTo(UPWORK_URL.bestMatches);
    await wait(1000);
    await this.waitForLogin();

    // await this.findJobs(testSearchSuit1);
    // return;

    const job = await this.jobsService.findOne(
      'e9abbaae-72d0-45e5-97a7-2c29ae152300',
    );

    await this.applyForJob(job);
  }

  // Auth
  private async login() {
    console.log('Logging in...');
    this.isLoginActive = true;

    await this.ui.setToLocalStorage(LOCAL_STORAGE_VALUES);

    await wait(500);

    await this.ui.type(SELECTORS.login.input.email, process.env.UPWORK_EMAIL);
    await this.ui.click(SELECTORS.login.btn.goToPwd);

    await this.ui.type(SELECTORS.login.input.pwd, process.env.UPWORK_PASSWORD);
    await this.ui.click(SELECTORS.login.btn.login);

    try {
      await wait(3000);
      await this.ui.click(SELECTORS.login.input.secret);
      await wait(1000);
      await this.ui.type(
        SELECTORS.login.input.secret,
        process.env.UPWORK_SECRET,
      );
      await this.ui.click(SELECTORS.login.btn.login);
    } catch {}

    await this.ui.saveCookies();
    this.isLoginActive = false;
  }

  private waitForLogin() {
    return new Promise((resolve) => {
      const interval = setInterval(() => {
        if (!this.isLoginActive) {
          clearInterval(interval);
          resolve(true);
        }
      }, 1000);
    });
  }
}
